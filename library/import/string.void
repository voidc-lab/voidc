//---------------------------------------------------------------------
//- Copyright (C) 2020-2025 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{ voidc_import("libvoidc.void"); }
{
    voidc_set_level_limit(LIBVOIDC_LIMIT_LEVEL_03);

    voidc_make_header("string");
}
//---------------------------------------------------------------------
{
    v_import("cstdarg.void");
    v_import("cstdio.void");
    v_import("cstring.void");
}


//---------------------------------------------------------------------
{   gctx = v_target_get_global_ctx();
    vctx = v_target_get_voidc_global_ctx();

    bool_type  = v_uint_type(1);
    bool_type_ = v_type_get_llvm_type(bool_type);

    ull = uint(long_long.sizeof * 8);         //- ?

    .LLVMConstInt: (LLVMTypeRef, ull, int) ~> LLVMValueRef;

    is_voidc_v = .LLVMConstInt(bool_type_, gctx == vctx, 0);

    v_add_constant("IS_VOIDC", bool_type, is_voidc_v);

    v_target_set_global_ctx(vctx);

    v_add_symbol("cur_gctx", v_target_global_ctx_t, gctx);

    v_target_set_global_ctx(gctx);
}


//---------------------------------------------------------------------
//- Implementation in GCC style...
//---------------------------------------------------------------------
private
USE_STRING_IMPL  =  !IS_VOIDC  ||  v_defined(BOOTSTRAP);

#if (USE_STRING_IMPL)

  private
  v_string_impl_t = struct
  {
      _data: *char;
      _size: size_t;

      union
      {
          local: char[16];

          capacity: size_t;
      };
  };

#endif

//---------------------------------------------------------------------
#if (IS_VOIDC)

  v_string_t = v_std_string_t;          //- ?!?

  #if (v_defined(BOOTSTRAP))

    private
    #define (_.impl): (s: &v_string_t) ~> &v_string_impl_t  =  *(&s : *v_string_impl_t);

  #else

    private
    #define (_.impl): (s: &v_string_t) ~> &v_std_string_t  =  s;

  #endif

#else

  v_string_t = v_string_impl_t;

  private
  #define (_.impl): (s: &v_string_t) ~> &v_string_impl_t  =  s;

#endif


//---------------------------------------------------------------------
#if (USE_STRING_IMPL)

  private
  #define (_.is_long): (s: &v_string_impl_t) ~> bool  =  s._data != s[2].local;

#endif


//---------------------------------------------------------------------
#if (!IS_VOIDC)

  inlinehint
  (v_initialize(_)): (dst: *v_string_t, count: size_t) ~> void
  {
      for (i: &size_t := 0; i < count; ++i)
      {
          di = dst[i].impl;

          di._data := di[2].local;
          di._size := 0;
          di[2].local[0] := 0;
      }
  }

  inlinehint
  (v_terminate(_)): (dst: *v_string_t, count: size_t) ~> void
  {
      for (i: &size_t := 0; i < count; ++i)
      {
          di = dst[i].impl;

          if (di.is_long) v_free(di._data);
      }
  }

  inlinehint
  (v_copy(_)): (dst: *v_string_t, src: *const v_string_t, count: size_t) ~> void
  {
      for (i: &size_t := 0; i < count; ++i)
      {
          di = dst[i].impl;
          si = src[i].impl;

          if (di.is_long) v_free(di._data);

          sz = si._size;

          di._size := sz;

          sz1 = sz + 1;

          if (si.is_long)
          {
              csz = (sz1 + 15) & ~15;

              di._data := v_malloc(char, csz);

              di[2].capacity := csz - 1;
          }
          else
          {
              di._data := di[2].local;
          }

          memcpy(di._data, si._data, sz1);
      }
  }

  inlinehint
  (v_move(_)): (dst: *v_string_t, src: *v_string_t, count: size_t) ~> void
  {
      for (i: &size_t := 0; i < count; ++i)
      {
          di = dst[i].impl;
          si = src[i].impl;

          if (di.is_long) v_free(di._data);

          sz = si._size;

          di._size := sz;

          if (si.is_long)
          {
              di._data := si._data;

              di[2].capacity := si[2].capacity;

              si._data := si[2].local;
          }
          else
          {
              di._data := di[2].local;

              memcpy(di._data, si._data, sz+1);
          }

          si._size := 0;
          si[2].local[0] := 0;
      }
  }

#endif


//---------------------------------------------------------------------
#if (USE_STRING_IMPL)

  alwaysinline
  (_.data): (s: v_string_t) ~> *char  =  (&s)->impl._data;

  alwaysinline
  (_.size): (s: v_string_t) ~> size_t  =  (&s)->impl._size;

  inlinehint
  (_.capacity): (s: v_string_t) ~> size_t
  {
      s = (&s)->impl;

      if (s.is_long)  return s[2].capacity;
      else            return 15;
  }

#else

  alwaysinline
  (_.data): (s: v_string_t) ~> *char  =  v_std_string_get(&s);

  alwaysinline
  (_.size): (s: v_string_t) ~> size_t  =  v_std_string_get_size(&s);

#endif


//---------------------------------------------------------------------
#if (USE_STRING_IMPL)

  inlinehint
  (_.set_data()): (str: &v_string_t, s: *const char, len: size_t) ~> &v_string_t  =
  {
      str_impl = str.impl;

      if (len > str.capacity)
      {
          if (str_impl.is_long) v_free(str.data);

          csz = (len + (1+15)) & ~15;

          str_impl._data := v_malloc(char, csz);
          str_impl[2].capacity := csz - 1;
      }

      memcpy(str_impl._data, s, len);

      str_impl._data[len] := 0;

      str_impl._size := len;

      str
  };

#else

  alwaysinline
  (_.set_data()): (str: &v_string_t, s: *const char, len: size_t) ~> &v_string_t  =
  {
      v_std_string_set_data(&str, s, len);

      str
  };

#endif

inlinehint
(_.set()): (str: &v_string_t, s: *const char) ~> &v_string_t  =  str.set_data(s, strlen(s));


//---------------------------------------------------------------------
#if (USE_STRING_IMPL)

  inlinehint
  (_.append_data()): (str: &v_string_t, s: *const char, len: size_t) ~> &v_string_t  =
  block
  {
      if (len == 0) break str;      //- !

      str_impl = str.impl;

      sz = str.size;

      sz_len = sz + len;

      if (sz_len > str.capacity)
      {
          csz = (sz_len + (1+15)) & ~15;

          if (str_impl.is_long)
          {
              .realloc: (*void, size_t) ~> *void;

              str_impl._data := (.realloc(str_impl._data, csz) : *char);
          }
          else
          {
              d = v_malloc(char, csz);

              memcpy(d, str_impl._data, sz);

              str_impl._data := d;
          }

          str_impl[2].capacity := csz - 1;
      }

      memcpy(str_impl._data+sz, s, len);

      str_impl._data[sz_len] := 0;

      str_impl._size := sz_len;

      break  str;
  };

#else

  alwaysinline
  (_.append_data()): (str: &v_string_t, s: *const char, len: size_t) ~> &v_string_t  =
  {
      v_std_string_append_data(&str, s, len);

      str
  };

#endif

inlinehint
(_.append()): (str: &v_string_t, s: *const char) ~> &v_string_t  =  str.append_data(s, strlen(s));


//---------------------------------------------------------------------
alwaysinline
(_.append_char()): (str: &v_string_t, c: char) ~> &v_string_t  =  str.append_data(&c, 1);

inlinehint
(_.append_char32()): (str: &v_string_t, c: char32_t) ~> &v_string_t  =
{
    r: &int     := undef;
    d: &char[4] := undef;

    if (c <= 0x7FF)
    {
        if (c <= 0x7F)  r := 0;
        else            r := 1;
    }
    else
    {
        if (c <= 0xFFFF)  r := 2;
        else              r := 3;
    }

    if (r == 0)
    {
        d[0] := (c & 0x7F : char);
    }
    else
    {
        c: &char32_t := c;

        for (j: &int := 0; j < r; ++j)
        {
            d[r-j] := (0x80 | (c & 0x3F) : char);

            c >>= 6;
        }

        d[0] := ((0x1E << (6-r)) | (c & (0x3F >> r)) : char);
    }

    str.append_data(d, r+1)
};


//---------------------------------------------------------------------
inlinehint
(_.append_number()): (str: &v_string_t, n: intptr_t) ~> &v_string_t  =
{
    buf: &char[24] := undef;

    len = sprintf(buf, "%zd", n);

    str.append_data(buf, len)
};

//---------------------------------------------------------------------
inlinehint
(_.appendf()): (str: &v_string_t, fmt: *const char, ...) ~> &v_string_t  =
{
    ap:  &va_list := undef;
    apc: &va_list := undef;

    va_start(ap);

    va_copy(apc, ap);
    len = vsnprintf(0, 0, fmt, ap);
    va_end(ap);

    bsz = len + 1;

    buf = v_malloc(char, bsz);
    defer v_free(buf);

    vsnprintf(buf, bsz, fmt, apc);
    va_end(apc);

    str.append_data(buf, len)
};


//---------------------------------------------------------------------
alwaysinline
(_:=_): (str: &v_string_t, val: v_string_t) ~> &v_string_t  =
{
    v_copy(&str, &val);

    str
};

//---------------------------------------------------------------------
alwaysinline
(_+_): (a: v_string_t, b: v_string_t) ~> v_string_t
{
    ret = v_get_return_value();

    ret := a;

    ret.append_data(b.data, b.size);
}

alwaysinline
(_+__): (a: v_string_t, b: v_string_t) ~> v_string_t  =  a + b;


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
alwaysinline
v_internal_adopt_to_string: (s: *const char) ~> v_string_t
{
    ret = v_get_return_value();

    ret.set(s);
}


//---------------------------------------------------------------------
{ v_target_set_global_ctx(v_target_get_voidc_global_ctx()); }

//=====================================================================
{ voidc_unit_begin_module("string_module"); }


//---------------------------------------------------------------------
private
try_to_adopt_ctx_t = struct
{
    fun: *((*void, *v_type_t, LLVMValueRef) ~> bool);
    aux: *void;

    string_type: *v_type_t;
    char_type:   *v_type_t;
};

//---------------------------------------------------------------------
private
try_to_adopt_to_string: (aux: *void, t0: *v_type_t, v0: LLVMValueRef) ~> bool
{
//printf("try_to_adopt_to_string: start\n");
//defer printf("try_to_adopt_to_string: stop\n");

    ctx = *(aux: *try_to_adopt_ctx_t);

    string_type = ctx.string_type;
    char_type   = ctx.char_type;

    block
    {
        t1 = v_get_result_type();

        if (t1 == INVIOLABLE_TAG)  break;
        if (t1 == UNREFERENCE_TAG) break;

        check: &bool := true;

        block
        {
            if (t1 == string_type)  break;

            if (v_type_is_reference(t1)  &&  v_type_refptr_get_element_type(t1) == string_type)  break;

            check := false;
        }

        if (!check)  break;

        block
        {
            tt: &*v_type_t := t0;

            if (v_type_is_reference(t0))  tt := v_type_refptr_get_element_type(t0);

            if (v_type_is_pointer(tt)  &&  v_type_refptr_get_element_type(tt) == char_type)  break;

            if (v_type_is_array(tt)  &&  v_type_array_get_element_type(tt) == char_type)  break;

            check := false;
        }

        if (!check)  break;

        //- Got it...

        expr: &v_ast_expr_t      := {};
        list: &v_ast_expr_list_t := {};

        v_ast_make_expr_compiled(&expr, t0, v0);

        v_make_list(&list, &expr);

        v_ast_make_expr_identifier(&expr, "v_internal_adopt_to_string");

        v_ast_make_expr_call(&expr, &expr, &list);

        v_ast_accept_visitor(&expr, v_get_compiler());

        return  true;
    }

    //- Default treatment...

    return  ctx.fun(ctx.aux, t0, v0);
}

//---------------------------------------------------------------------
v_internal_try_to_adopt_to_string_effort: (*void) ~> void
{
    v_assert(v_find_constant("voidc.internal.local_objects_enabled", 0, 0));        //- Sic !?!

    ctx = v_malloc(try_to_adopt_ctx_t);

    ctx->fun := v_get_try_to_adopt_hook(&ctx->aux);
    v_set_try_to_adopt_hook(try_to_adopt_to_string, ctx);

    ctx->string_type := v_find_type("v_string_t");
    ctx->char_type   := v_int_type(8);

    free: (*void) ~> void;

    v_add_local_cleaner(free, ctx);
}


//---------------------------------------------------------------------
{   if (v_find_symbol_value("v_internal_try_to_adopt_to_string_effort"))
    {
        voidc_skip_object_file_load(1);
    }
}

//=====================================================================
{ voidc_unit_end_module(); }


//---------------------------------------------------------------------
{   v_target_set_global_ctx(cur_gctx);

    v_export_effort(v_internal_try_to_adopt_to_string_effort, 0);
}


