{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("level-03/intrinsics_derive.void");
    v_import("level-03/local_objects.void");
    v_import("level-03/heap_objects.void");
    v_import("level-03/global_objects.void");
    v_import("level-03/coercions.void");
    v_import("level-03/namespaces.void");
    v_import("level-03/generics_etc.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
    voidc_enable_heap_objects();
    voidc_enable_global_objects();
    voidc_enable_coercions();
    voidc_enable_namespaces();
    voidc_enable_generics_etc();
}


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("T_q", q_ref, q("T"));

    v_add_symbol("expr_identifier_q", q_ref, q("expr_identifier"));

    v_add_symbol("q_static_type_t", q_ref, q("v_static_type_t"));
}


//=====================================================================
{   voidc_unit_begin_module("genetc_mod_test_module"); }


//---------------------------------------------------------------------
export
namespace my {


//---------------------------------------------------------------------
export
unique_ptr = v_object_intrinsic("my.unique_ptr");

//---------------------------------------------------------------------
private
unique_ptr_q = v_quark_from_string("my.unique_ptr");        //- ???

private
unique_ptr_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    v_push_result();

    static_type_t = v_find_type_q(q_static_type_t);

    v_set_result_type(static_type_t);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    arg = v_type_generic_type_arg(elt);

    typ = v_generic_type(unique_ptr_q, &arg, 1);

    v_pop_result();

    v_adopt_result(static_type_t, (typ: LLVMValueRef));
}

private
unique_ptr_obtain_llvm_type: (*void, typ: *v_type_t) ~> LLVMTypeRef
{
    rt = v_pointer_type(v_void_type(), 0);          //- Sic !?!

    rt_ = v_type_get_llvm_type(rt);

    v_type_set_cached_llvm_type(typ, rt_);

    return  rt_;
}


//---------------------------------------------------------------------
unique_ptr_ns = v_object_intrinsic("unique_ptr.namespace");

//---------------------------------------------------------------------
private
unique_ptr_ns_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);        //- Type

    v_reset_result();

    v_set_result_type(v_find_type_q(q_static_type_t));

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "unique_ptr_ns-");

    voidc_internal_std_string_append_type(&sstr, elt);

    ns_name = v_quark_from_string(v_std_string_get(&sstr));

    ns = (aux: *v_namespace_t);

    if (a = v_map_find(&ns->map, (ns_name: intptr_t)))
    {
        q = v_std_any_get_value(v_quark_t, a);

        t: &*v_type_t    := undef;
        v: &LLVMValueRef := undef;

        v_find_constant_q(q, &t, &v);

        v_set_result_type(t);
        v_set_result_value(v);
    }
    else
    {
        ns = v_obtain_namespace_q(ns_name);                 //- WTF ?!?!?!?!?

        v_set_result_type(v_find_type("v_static_namespace_t"));
        v_set_result_value((ns: LLVMValueRef));
    }
}


//---------------------------------------------------------------------
private
template_src: &const char[] :=          //- T - type parameter ...
"""
namespace my
{
  inlinehint
  (v_initialize(_)): (sp: *unique_ptr(T), N: size_t) ~> void
  {
      .memset: (s: *void, c: int, n: size_t) ~> *void;

      .memset(sp, 0, N*my.unique_ptr(T).sizeof);
  }

  alwaysinline
  (_.get()): (sp: unique_ptr(T)) ~> *T  =  *(&sp: **T);

  inlinehint
  (v_terminate(_)): (sp: *unique_ptr(T), N: size_t) ~> void
  {
      for (i: &int := 0; i < N; ++i)
      {
          if (p = sp[i].get())  delete p;
      }
  }


  alwaysinline
  (_.release()): (sp: &unique_ptr(T)) ~> *T
  {
      r = sp.get();

      *(&sp: **T) := 0;

      return  r;
  }

  alwaysinline
  (_.reset()): (sp: &unique_ptr(T), p: *T) ~> void
  {
      if (pp = sp.get())  delete pp;      //- Kinda   v_terminate(&sp);

      *(&sp: **T) := p;
  }


  inlinehint
  (v_move(_)): (dst: *unique_ptr(T), src: *unique_ptr(T), N: size_t) ~> void
  {
      for (i: &int := 0; i < N; ++i)  dst[i].reset(src[i].release());
  }


  alwaysinline
  (*_): (sp: unique_ptr(T)) ~> &T  =  *sp.get();

  alwaysinline
  (_->): (sp: unique_ptr(T)) ~> *T  =  sp.get();


  alwaysinline
  (_:=_): (dst: &unique_ptr(T), src: &unique_ptr(T)) ~> &unique_ptr(T)
  {
      dst.reset(src.release());       //- Kinda   v_move(&dst, &src);

      return  dst;
  }

  //-------------------------------------------------------------
  namespace unique_ptr_ns(T)
  {
    inlinehint
    create: () ~> unique_ptr(T)
    {
        ret = v_get_return_value();

        ret.reset(new T);
    }
  }   //- namespace unique_ptr_ns(T)
}   //- namespace my
""";


//---------------------------------------------------------------------
private
template_ast: &v_ast_generic_list_t := {};

//---------------------------------------------------------------------
private
fgetc_fun: (void_data: *void) ~> int
{
    cur_pos = *(void_data : **const char);

    c = (*cur_pos : uint(8));

    if (!c) return  -1;

    ++cur_pos;

    return  c;
}

//---------------------------------------------------------------------
private
parse_template: (tag: *const char, src: *const char) ~> v_std_any_t
{
    ctx: &v_peg_context_t[2] := {};

    my_ctx    = ctx + 0;
    saved_ctx = ctx + 1;

    grm = v_peg_get_grammar();

    v_assert(grm);

    cur_pos: &*const char := src;

    v_peg_make_context(my_ctx, fgetc_fun, &cur_pos, grm);

    cur_ctx = v_peg_get_context();

    v_copy(saved_ctx, cur_ctx);
    defer v_copy(cur_ctx, saved_ctx);

    v_copy(cur_ctx, my_ctx);

    ret = v_get_return_value();

    v_peg_parse(&ret, v_quark_from_string(tag));
}


//---------------------------------------------------------------------
private
my_compile_expr_identifier_ctx_t = struct
{
    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
    aux: *void;

    par: *v_ast_expr_t;
};

private
my_compile_expr_identifier: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("my_compile_expr_identifier start\n");
//defer printf("my_compile_expr_identifier stop\n");

    ctx = *(aux: *my_compile_expr_identifier_ctx_t);

    qname = v_ast_expr_identifier_get_name_q((self: *v_ast_expr_t));

    if (qname == v_quark_from_string("T"))
    {
        v_ast_accept_visitor(ctx.par, vis);

        return;
    }

    ctx.fun(ctx.aux, vis, self);
}

//---------------------------------------------------------------------
export
instantiate_unique_ptr = v_object_intrinsic("my.instantiate_unique_ptr");

//---------------------------------------------------------------------
private
instantiate_unique_ptr_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("instantiate_unique_ptr_intrinsic start\n");
//defer printf("instantiate_unique_ptr_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    static_type_t = v_find_type_q(q_static_type_t);

    v_reset_result();

    v_set_result_type(static_type_t);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    //-------------------------------------------------------------
    //- T - type parameter ...
    //-------------------------------------------------------------

    par: &v_ast_expr_t := {};

    v_ast_make_expr_compiled(&par, static_type_t, (elt: LLVMValueRef));

    ctx: &my_compile_expr_identifier_ctx_t := undef;

    q = v_quark_from_string("expr_identifier");

    ctx.fun := voidc_visitor_get_method(vis, q, &ctx.aux);

    ctx.par := &par;

    //-------------------------------------------------------------
    v_assert(vis == v_get_compiler());

    saved_vis: &voidc_visitor_t := {};

    v_copy(&saved_vis, vis);

    voidc_visitor_set_method(vis, vis, q, my_compile_expr_identifier, &ctx);

    n = v_list_get_size(&template_ast);

    for (i: &int := 0; i < n; ++i)
    {
        item = v_list_get_item(&template_ast, i);

        v_reset_result();       //- ?

        v_ast_accept_visitor(item, vis);
    }

    v_copy(vis, &saved_vis);
}


//---------------------------------------------------------------------
export
make_unique = v_object_intrinsic("my.make_unique");

//---------------------------------------------------------------------
private
make_unique_src: &const char[] := ".my.unique_ptr_ns(T).create()";

private
make_unique_ast: &v_ast_expr_t := {};

//---------------------------------------------------------------------
private
make_unique_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("make_unique_intrinsic start\n");
//defer printf("make_unique_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    static_type_t = v_find_type_q(q_static_type_t);

    v_push_result();

    v_set_result_type(static_type_t);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    //-------------------------------------------------------------
    //- T - type parameter ...
    //-------------------------------------------------------------

    static_type_t = v_find_type_q(q_static_type_t);

    par: &v_ast_expr_t := {};

    v_ast_make_expr_compiled(&par, static_type_t, (elt: LLVMValueRef));

    ctx: &my_compile_expr_identifier_ctx_t := undef;

    q = expr_identifier_q;

    ctx.fun := voidc_visitor_get_method(vis, q, &ctx.aux);

    ctx.par := &par;

    //-------------------------------------------------------------
    v_assert(vis == v_get_compiler());

    saved_vis: &voidc_visitor_t := {};

    v_copy(&saved_vis, vis);

    voidc_visitor_set_method(vis, vis, q, my_compile_expr_identifier, &ctx);

    v_pop_result();

    v_ast_accept_visitor(&make_unique_ast, vis);

    v_copy(vis, &saved_vis);
}


//---------------------------------------------------------------------
private
parse_templates: () ~> void
{
    if (!v_empty(&template_ast))  return;

    any = parse_template("unit_defn_list", template_src);

    ast = v_std_any_get_pointer(v_ast_generic_list_t, &any);

    v_assert(ast);

    v_copy(&template_ast, ast);

    any = parse_template("expr", make_unique_src);

    ast = v_std_any_get_pointer(v_ast_expr_t, &any);

    v_assert(ast);

    v_copy(&make_unique_ast, ast);
}


//---------------------------------------------------------------------
export
enable_unique_ptr: () ~> void
{
    v_add_intrinsic("my.unique_ptr", unique_ptr_intrinsic, 0);

    v_type_generic_set_obtain_llvm_type_hook(unique_ptr_q, unique_ptr_obtain_llvm_type, 0);

    v_add_intrinsic("unique_ptr.namespace", unique_ptr_ns_intrinsic, v_find_constant_value("my"));

    v_add_intrinsic("my.instantiate_unique_ptr", instantiate_unique_ptr_intrinsic, 0);

    parse_templates();

    v_add_intrinsic("my.make_unique", make_unique_intrinsic, 0);
}

//---------------------------------------------------------------------
}   //- namespace my


//=====================================================================
{   voidc_unit_end_module(); }


